{"version":3,"sources":["PodPicker.js"],"names":["window","document","PodPicker","container","items","options","this","itemsIndex","preTime","startTimeSet","seekingIndex","throwError","constructor","String","getElementById","Array","length","Object","that","sort","pre","next","convertTime","start","setup","prototype","createTimeline","fragment","createDocumentFragment","timeline","createElement","pointer","ul","len","i","item","span","push","_item","addEventListener","audioElem","play","currentTime","className","appendChild","createTextNode","title","Math","abs","setPointerPosition","pause","setTimeout","clearTimeout","removeAttribute","style","color","timelineColor","id","test","getElementsByTagName","currentSrcInterval","setInterval","currentSrc","clearInterval","match","index","getElementsByClassName","item_h","offsetHeight","item_len","children","top","timeString","timeArray","split","error_string","Error"],"mappings":"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","file":"PodPicker.min.js","sourcesContent":["/*!\n * Pod Picker - A Podcast Timeline Generator\n * https://github.com/RoberMac/PodPicker\n *\n * Copyright (c) 2015 RoberTu <robertu0717@gmail.com>\n * @license MIT\n * @version v0.1.0\n */\n\n;(function (window, document){\n\n    'use strict';\n\n    function PodPicker(container, items, options){\n\n        // init\n        this.itemsIndex = 0\n        this.preTime = 0\n        this.startTimeSet = []\n        this.seekingIndex = 0\n\n        /**\n         * Basic Check\n         * throw an error if the parameters is invalid\n         **********************************************\n         */\n\n        // check `container` parameter\n        typeof container === 'undefined'\n        ? this.throwError('Pod Picker: `container` parameter is required')\n        : container.constructor !== String\n            ? this.throwError('Pod Picker: `container` parameter must be an string')\n            : container = document.getElementById(container)\n\n        !container\n        ? this.throwError('Pod Picker: `container` parameter is not related to an existing ID')\n        : null\n\n        // check `items` parameter\n        typeof items === 'undefined'\n        ? this.throwError('Pod Picker: `items` parameter is required')\n        : items.constructor !== Array\n            ? this.throwError('Pod Picker: `items` parameter must be an array')\n            : items.length <= 0\n                ? this.throwError('Pod Picker: `items` parameter cannot be an empty array')\n                : null\n\n        // check `options` parameter\n        typeof options !== 'undefined' && options.constructor !== Object\n        ? this.throwError('Pod Picker: `options` parameter must be an object')\n        : options = options || {}\n\n        // Sort items array by item object\n        var that = this\n        items = items.sort(function (pre, next){\n\n            var pre  = that.convertTime(pre.start),\n                next = that.convertTime(next.start);\n\n            if (pre > next){\n                return 1\n            } else if (pre < next){\n                return -1\n            } else {\n                return 0\n            }\n        })\n\n        // Setup\n        this.setup(container, items, options)\n\n    }\n\n    /**\n     * Setup\n     */\n    PodPicker.prototype.setup = function (container, items, options){\n\n        // allow options: 'audioElem', 'timelineColor'\n        // check allow options: 'audioElem'\n        typeof options.audioElem !== 'undefined'\n        ? typeof options.audioElem !== 'string'\n            ? this.throwError('Pod Picker: `options.audioElem` must be an string')\n            : null\n        : null\n\n        // check allow options: 'timelineColor'\n        typeof options.timelineColor !== 'undefined'\n        ? typeof options.timelineColor !== 'string'\n            ? this.throwError('Pod Picker: `options.timelineColor` must be an string')\n            : /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(options.timelineColor)\n                // via http://stackoverflow.com/a/8027444/3786947\n                ? null\n                : this.throwError('Pod Picker: `options.timelineColor` must be an hex color')\n        : null\n\n        // init options\n        var audioElem = options.audioElem\n                ? document.getElementById(options.audioElem)\n                : document.getElementsByTagName('audio')[0],\n            timelineColor = options.timelineColor || '#CECECF',\n            that     = this;\n\n\n        /**\n         * Create the timeline element and then append it to `container` element\n         ************************************************************************\n         */\n\n        /**\n         * Check `audioElem` source file, throw error if audio file is MP3 file format\n         *\n         * For more details, see: \n         *   http://forums.codescript.in/javascript/html5-audio-currenttime-attribute-inaccurate-27606.html\n         *   https://jsfiddle.net/yp3o8cyw/2/\n         *\n         */\n        var currentSrcInterval = setInterval(function (){\n            var currentSrc = audioElem.currentSrc\n            if (currentSrc){\n                clearInterval(currentSrcInterval)\n                currentSrc.match(/\\.mp3/i)\n                    ? that.throwError('Pod Picker: does not support MP3 file format')\n                    : createTimeline()\n            }\n        }, 10)\n\n        function createTimeline(){\n            var fragment = document.createDocumentFragment(''),\n                timeline = document.createElement('div'),\n                pointer  = document.createElement('span'),\n                ul       = document.createElement('ul'),\n                len      = items.length;\n\n            for (var i = 0; i < len; i++){\n\n                var item  = document.createElement('li'),\n                    span  = document.createElement('span'),\n                    start = that.convertTime(items[i].start);\n\n                // Extract all `item` start time and then push it to `that.startTimeSet`\n                that.startTimeSet.push(start)\n\n                // Register event handlers to `item` element\n                ;(function (_item, start){\n                    // Jump to certain time offsets in `audioElem` when user click the item > span element\n                    _item.addEventListener('click', function (){\n                        audioElem.play()\n                        audioElem.currentTime = start\n                    })\n                })(span, start)\n\n                item.className = 'pp-item'\n                span.appendChild(document.createTextNode(items[i].title))\n                item.appendChild(span)\n                ul.appendChild(item)\n            }\n\n            // Register event handlers to `audioElem` element\n            audioElem.addEventListener('timeupdate', function (){\n                // init\n                var currentTime  = audioElem.currentTime,\n                    startTimeSet = that.startTimeSet,\n                    len          = startTimeSet.length;\n\n                if (Math.abs(that.preTime - currentTime) > 1){\n                    // user-triggered\n                    for (var i = 0; i < len; i++){\n                        startTimeSet[i + 1] // the last one \n                        ? currentTime >= startTimeSet[i] && currentTime <= startTimeSet[i + 1]\n                            ? that.setPointerPosition(i + 1)\n                            : null\n                        : currentTime >= startTimeSet[i]\n                            ? that.setPointerPosition(i + 1)\n                            : null\n                    }\n                } else {\n                    // auto-triggered\n                    for (var i = 0; i < len; i++){\n                        currentTime > startTimeSet[i] - 1 \n                            && currentTime <= startTimeSet[i] + 1 \n                            && that.itemsIndex !== i + 1\n                        ? that.setPointerPosition(i + 1)\n                        : null\n                    }\n                }\n\n                that.preTime = currentTime\n            })\n            // Seeking\n            audioElem.addEventListener('seeking', function (){\n                audioElem.pause()\n                that.seekingIndex = window.setTimeout(function (){\n                    document.getElementById('pp-pointer').className = 'seeking'\n                }, 500)\n            })\n            // Seeked\n            audioElem.addEventListener('seeked', function (){\n                window.clearTimeout(that.seekingIndex)\n                audioElem.play()\n                document.getElementById('pp-pointer').removeAttribute('class')\n            })\n\n            ul.style.color = timelineColor\n            pointer.id = 'pp-pointer'\n            timeline.id = 'pp-timeline'\n            timeline.appendChild(ul)\n            timeline.appendChild(pointer)\n            fragment.appendChild(timeline)\n            container.appendChild(fragment)\n        }\n\n    }\n\n    /**\n     * Set or reset timeline pointer position\n     */\n    PodPicker.prototype.setPointerPosition = function (index){\n\n        var item       = document.getElementsByClassName('pp-item'),\n            pointer    = document.getElementById('pp-pointer'),\n            item_h     = item[0].offsetHeight,\n            item_len   = item.length;\n\n        // Store current item(Section) index\n        this.itemsIndex = index\n        // Set timeline section style\n        item[index - 1].children[0].className = 'currentSection'\n        for (var i = 0; i < item_len; i++){\n            i !== index - 1\n            ? item[i].children[0].removeAttribute('class')\n            : null\n        }\n        // Set timeline pointer position\n        pointer.style.top = (index * item_h - item_h / 2 - 6) + 'px'\n\n    }\n\n    /**\n     * Convert time string to seconds\n     */\n    PodPicker.prototype.convertTime = function(timeString){\n\n        // check time string\n        /^(?:(?:([01]?\\d|2[0-3]):)?([0-5]?\\d):)?([0-5]?\\d)$/.test(timeString)\n        // via http://stackoverflow.com/a/8318367/3786947\n        ? null\n        : this.throwError('Pod Picker: `start` time string must be \"hh:mm:ss\", \"mm:ss\" or \"ss\" format')\n\n        var timeArray = timeString.split(':'),\n            len = timeArray.length;\n\n        switch (len){\n\n            case 1: \n                return timeArray[0] * 1\n                break;\n            case 2:\n                return timeArray[0] * 60 + timeArray[1] * 1\n                break;\n            case 3:\n                return timeArray[0] * 60 * 60 + timeArray[1] * 60 + timeArray[2] * 1\n                break;\n            default:\n                this.throwError('Pod Picker: `start` time string must be \"hh:mm:ss\", \"mm:ss\" or \"ss\" format')\n        }\n\n    }\n\n    /**\n     * Throw Error\n     */\n    PodPicker.prototype.throwError = function (error_string){\n        throw new Error(error_string)\n    }\n\n\n    // Browser globals\n    if (!window.PodPicker){\n        window.PodPicker = PodPicker;\n    }\n\n})(window, document);"],"sourceRoot":"/source/"}